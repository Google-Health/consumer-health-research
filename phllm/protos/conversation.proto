// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
edition = "2023";

// The conversation proto contains data relating to a (potentially multi-modal)
// set of interactions with a language model or a human expert.
//  - Conversations can be joined with the original case study input via
//    the `case_study_id`.
//  - Each conversation consists of an ordered sequence of `Message`s that can
//    be joined with elements of the original case_study via the `tag`.
package phllm_protos;

option features.enum_type = CLOSED;
option features.utf8_validation = NONE;

// / Conversations and messages.

// User provided feedback.
message Feedback {
  enum Type {
    FEEDBACK_TYPE_UNSPECIFIED = 0;
    POSITIVE = 1;
    NEGATIVE = 2;
  }

  Type type = 1;

  // Category typically is only specified when a negative feedback is provided.
  string category = 2;

  // User provided feedback. Typically only provided for a negative feedback.
  string text = 3;
}

// Message constituents
message Chunk {
  oneof value {
    string text = 1;
    Feedback feedback = 2;

    // Base64 encoded image to include as part of the message. This may
    // be an input image for multimodal models, or generated/rendered images
    // as part of the output.
    string image_base64 = 3;
  }
}

// A single message in the conversation.
message Message {
  // Optional metadata / tagging info for this message intended for debug usage
  string tag = 1;

  // Common message roles assigned to messages.
  enum Role {
    UNKNOWN_ROLE = 0;

    // System instructions or commands ahead of the conversation. e.g.
    // "assistant should be polite and helpful"
    SYSTEM = 1;

    // Input from the user in a dialogue between user & assistant.
    USER = 2;

    // Responses from the assistant in a dialogue between user & assistant.
    ASSISTANT = 3;

    // Additional documents or information relevant to this conversation.
    CONTEXT = 4;

    // For ground truth notes / responses provided by a human
    GRADER = 5;

    // User provided feedback.
    USER_FEEDBACK = 6;
  }

  Role role = 2;

  // The ordered constituent chunks of the message.
  repeated Chunk chunks = 3;

  // The score assigned by the model to this message.
  // NOTE: This is model-dependent. Often, the score is log-likelihood, but care
  // should be taken to interpret the score in the context of the application.
  float score = 4;
}

message Conversation {
  // The unique identifier for the case study this conversation derives from.
  string case_study_id = 1;

  // A unique identifier for this conversation.
  string conversation_id = 2;

  // Ordered messages that comprise this conversation. It is assumed that
  // preceding messages are included in the context for subsequent messages.
  repeated Message messages = 3;
}
